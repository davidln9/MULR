
The challenge will be to use the FIRST set generator that I made in CSE340. To use it, tokens must be converted to the right format and it must be reading from the file and not stdin (although I think that was taken care of already). The FIRST sets will then be used during the parsing stage to match input against the regexes and call them based on their names. If the regex matches, it will then return to the correct spot. If not, then the program must call the next regex with a FIRST set that has a match to the input.

I've abandoned the FIRST and FOLLOW generator because of issues in formats and grammars that are too complicated in these use cases for any academic generator to allow for


example:

$S : $A b ;
$A : a
   | b
   ;

instead of:

$S : $A b ;
$A : a ;
$A : b ;

proposed solution:
insert a stack with default size of 0. Add to stack every time a LPAREN is encountered.
A : (((a | b))) has a FIRST of a, b.
A : (a (b | c)) has a first of a.
A : a (b | c) is equivalent to the one above.



A : ((a b))* ;


10/7/2018:
grammar:
MULR;

$S: a* | b* ; //solved 10/08/18

input:
ab

output:
input char: a
input char: b
input char: $
Token[0]: 35: MULR
Token[1]: 3: ;
Token[2]: 14: S
Token[3]: 4: :
Token[4]: 2: a
Token[5]: 11: *
Token[6]: 16: *
Token[7]: 2: b
Token[8]: 11: *
Token[9]: 3: ;
YES
Program ended with exit code: 0

12/21/2018: UPDATE: Successfully added functions to start rule. Does not work for complicated issues, but works for this grammar:

MULR;

$S : $A
   | $B
   | $C
   ;

$A : '[' (a (',' a)* | b (',' b)*) ']' ;

$B : '{' (a (',' a)* | b (',' b)*) '}' ;

$C : '(' (a (',' a)* | b (',' b)*) ')' ;

Next challenge will be to make concatenation work from $A to $B. Needs FOLLOW set of A but as noted before that is not an easy task for this project


MULR;

$S : ($assignment ';'*) $class_declaration ;

$class_declaration : 'c' 'l' 'a' 's' 's' ' '+ $id $scope ;

$statements : $while_stmt | $for_stmt | $if_stmt | $assignment ;
$scope : '{' ($statements | $scope | $function) '}' ;

$assignment : ($id '=' $expr | $id '+' '+' | $id '-' '-' | $id '+' '=' $expr) ;

$condition: (($expr (' '* (( '=' | '>' | '<' | '!') '=' ' '*) $expr)*)?) ;

$int : ( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 )+ ;
$id :  (( 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' )+ $int?)+ ;

$expr : '(' $expr ')'
| $expr '+' $expr
| $expr '-' $expr
| $expr '/' $expr
| $expr '*' $expr
| $expr '!'
| $int
| $id
;

$while_stmt : 'w' 'h' 'i' 'l' 'e' ' '* '(' $condition ')' '{' $statments* '}' ;

$for_stmt: 'f' 'o' 'r' ' '* '(' $assignment ' '* $condition ';' ' '* $assignment ')' ;

$if_stmt: 'i' 'f' ' '* '(' $condition ')' ' '* '{' $statements '}'
